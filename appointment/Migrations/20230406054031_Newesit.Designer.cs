// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using appointment.Model;

#nullable disable

namespace appointment.Migrations
{
    [DbContext(typeof(AppointmentDbContext))]
    [Migration("20230406054031_Newesit")]
    partial class Newesit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("appointment.Model.appointments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("appointment.Model.Clinic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("appointment.Model.Doctors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("ClinicID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientRecordId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("PatientRecordId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("appointment.Model.PatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CasePatint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("PatientRecords");
                });

            modelBuilder.Entity("appointment.Model.Patients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("appointment.Model.appointments", b =>
                {
                    b.HasOne("appointment.Model.Doctors", "Doctor")
                        .WithMany("appointments")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("appointment.Model.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("appointment.Model.Doctors", b =>
                {
                    b.HasOne("appointment.Model.Clinic", "Clinic")
                        .WithMany("Doctor")
                        .HasForeignKey("ClinicID");

                    b.HasOne("appointment.Model.PatientRecord", "PatientRecord")
                        .WithMany("Doctor")
                        .HasForeignKey("PatientRecordId");

                    b.Navigation("Clinic");

                    b.Navigation("PatientRecord");
                });

            modelBuilder.Entity("appointment.Model.PatientRecord", b =>
                {
                    b.HasOne("appointment.Model.Patients", "Patient")
                        .WithOne("PatientRecord")
                        .HasForeignKey("appointment.Model.PatientRecord", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("appointment.Model.Clinic", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("appointment.Model.Doctors", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("appointment.Model.PatientRecord", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("appointment.Model.Patients", b =>
                {
                    b.Navigation("PatientRecord")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
